# -*- coding: utf-8 -*-
"""Protect_Pet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19SUPLh_UpvTiXo70j9ABg_0MEpvUnlqr
"""

import random
from datetime import datetime, time

def gerar_protocolo():
    return f"PT-{random.randint(1000,9999)}-{random.randint(1000,9999)}"

def horario_com_analista():
    return True

def confirmar_satisfacao():
    print("\nProtectPetBot: Esta informa√ß√£o foi satisfat√≥ria? (sim/n√£o)")
    resp = input().lower()
    if resp == "sim":
        mais_duvidas = input("ProtectPetBot: Deseja tirar mais alguma d√∫vida? (sim/n√£o): ").lower()
        if mais_duvidas == "n√£o":
            print("ProtectPetBot: Agradecemos seu contato com a ProtectPet. At√© logo! üêæ")
            exit()
        else:
            print("Retornando ao menu principal...\n")
    else:
        print("ProtectPetBot: Lamentamos! Um atendente ser√° acionado se necess√°rio (hor√°rio comercial).\n")

def confirmar_satisfacao_duvidas():
    print("\nProtectPetBot: Esta informa√ß√£o foi satisfat√≥ria? (sim/n√£o)")
    resp = input().lower()
    if resp == "sim":
        mais_duvidas = input("ProtectPetBot: Deseja tirar mais alguma d√∫vida? (sim/n√£o): ").lower()
        if mais_duvidas == "sim":
          print("ProtectPetBot: Agradecemos seu contato com a ProtectPet. At√© logo! üêæ")
          duvidas()
    else:
        print("Retornando ao menu de D√∫vidas...\n")



def cadastrar_cliente():
    print("\nProtectPetBot: Vamos iniciar o cadastro do respons√°vel.")
    nome_cliente = input("Nome completo: ")
    cpf = input("CPF (apenas n√∫meros): ")
    rg = input("RG (apenas n√∫meros e/ou letras): ")
    endereco = input("Endere√ßo completo (CEP, Rua, Bairro, Estado): ")
    data_de_nascimento = input("Data de nascimento (DD/MM/AAAA): ")
    email = input("E-mail: ")
    telefone = input("Telefone: ")


    contatos_emergencia = []
    for i in range(1):
        add_contato = input(f"Deseja adicionar pessoa de contato {i+1}? (sim/n√£o): ").lower()
        if add_contato == "sim":
            nome_contato = input("Nome do contato: ")
            tel_contato = input("Telefone do contato: ")
            email_contato = input("E-mail do contato: ")
            contatos_emergencia.append({
                "nome": nome_contato,
                "telefone": tel_contato,
                "email": email_contato
            })

    return {
        "nome": nome_cliente,
        "endereco": endereco,
        "email": email,
        "telefone": telefone,
        "contatos_emergencia": contatos_emergencia
    }

def cadastrar_pet():
    print("\nProtectPetBot: Agora, vamos cadastrar seu pet.")
    nome = input("Nome do pet: ")
    tipo = input("Tipo de pet (cachorro, gato, etc.): ")
    raca = input("Ra√ßa do pet: ")
    sexo = input("Sexo do pet (M para Macho/F para F√™mea): ")
    porte = input("Porte (pequeno, m√©dio ou grande): ")
    nascimento = input("Data de nascimento do pet (DD/MM/AAAA): ")

    return {
        "nome": nome,
        "tipo": tipo,
        "raca": raca,
        "sexo": sexo,
        "porte": porte,
        "nascimento": nascimento
    }

def selecao_produto():
    print("\nProtectPetBot: Antes de seguir para o processo de pagamento, vamos selecionar os dados da coleira para o seu pet.")
    cor = input("Cor da coleira: ")
    print("\nProtectPetBot: Estamos com dois modelos de coleiras dispon√≠veis para seu pet:")
    print("Tradicional (pesco√ßo) ‚Äì R$200,00")
    print("Peitoral (visando conforto) ‚Äì R$250,00")
    print("Ambas s√£o resistentes, seguras e ideais para o dia a dia.")
    tipo = input("Agora por favor, nos informe qual o tipo de coleira deseja.")


    return {
        "cor": cor,
        "tipo": tipo
    }

def fluxo_compra():
    cliente = cadastrar_cliente()
    pet = cadastrar_pet()
    selecao_produto()

    print("\nProtectPetBot: Aqui est√£o as funcionalidades da nossa coleira:")
    print("- Rastreamento GPS em tempo real üåç")
    print("- Resistente √† √°gua üí¶")
    print("- Suporte 24h via aplicativo üì±")
    print("- Localiza√ß√£o por chat caso o app esteja fora do ar üß≠")
    print("- Bateria recarregavel com dura√ß√£o de carga de at√© 170 horas! üîã")

    print("\nProtectPetBot: Um boleto ser√° enviado para o e-mail cadastrado no valor do Produto selecionado. Ressaltamos que o pagamento leva at√© dois dias para compensa√ß√£o banc√°ria.")
    metodo_entrega = input("Deseja receber em outro e-mail ou no WhatsApp? (Digite 'email', 'whatsapp' ou 'n√£o'): ").lower()

    if metodo_entrega == "email":
        novo_email = input("Informe o novo e-mail: ")
        print(f"ProtectPetBot: O boleto ser√° enviado para {novo_email}.")
    elif metodo_entrega == "whatsapp":
        zap = input("Informe o n√∫mero com DDD: ")
        print(f"ProtectPetBot: O boleto ser√° enviado via WhatsApp para {zap}.")
    else:
        print(f"ProtectPetBot: O boleto ser√° enviado para o e-mail cadastrado: {cliente['email']}.")

    print("\n‚ö†Ô∏è Aten√ß√£o:")
    print("T√≠tulo do e-mail: [ProtectPet] Pagamento de sua Coleira GPS")
    print("Descri√ß√£o: Este √© o √∫nico canal oficial de cobran√ßa da ProtectPet. Fique atento a golpes!")

    print("\nAp√≥s a confirma√ß√£o do pagamento:")
    print("- A produ√ß√£o leva at√© 3 dias √∫teis.")
    print("- A entrega leva at√© 5 dias √∫teis (variando conforme o endere√ßo).")
    print("- Voc√™ receber√° por e-mail o c√≥digo de rastreio do pedido.")

    protocolo = gerar_protocolo()
    print(f"\n‚úÖ Protocolo de atendimento: {protocolo}")
    print("-" * 50)

    confirmar_satisfacao()

def abrir_ticket(tipo, detalhes):
    ticket_id = gerar_protocolo()
    print(f"\nüé´ Ticket criado para '{tipo}': {ticket_id}")
    print(f"Detalhes: {detalhes}")
    print("-" * 50)

def suporte():
    print("\nProtectPetBot: Qual tipo de suporte voc√™ precisa?")
    print("1 - Manuten√ß√£o do Produto")
    print("2 - Troca da Coleira")
    print("3 - Informa√ß√µes em tempo real do pet")

    suporte_opcao = input("Digite o n√∫mero da op√ß√£o: ")

    if suporte_opcao == "1":
        problema = input("\nDescreva o problema ou digite 'quebra' se for esse o caso: ").lower()

        if "quebra" in problema:
            print("ProtectPetBot: üí° Procedimentos sugeridos:")
            print("1. Verifique se a coleira est√° bem presa e sem partes soltas.")
            print("2. Reinicie o dispositivo segurando o bot√£o por 5 segundos.")

            resposta = input("A coleira voltou a funcionar? (sim/n√£o): ").lower()
            if resposta == "n√£o":
                print("ProtectPetBot: Vamos solicitar a troca ou a visita t√©cnica.")
                visita = input("Deseja agendar uma visita t√©cnica? (sim/n√£o): ").lower()
                if visita == "sim":
                    if horario_com_analista():
                        print("ProtectPetBot: Transferindo para um analista dispon√≠vel para finalizar o atendimento e agendar a visita... üîß")
                else:
                    abrir_ticket("Solicita√ß√£o de Troca", "Produto n√£o resolveu ap√≥s tentativa de manuten√ß√£o.")
            else:
                abrir_ticket("Manuten√ß√£o Realizada", "Problema resolvido pelo cliente.")
        else:
            abrir_ticket("Manuten√ß√£o do Produto", problema)

    elif suporte_opcao == "2":
        motivo = input("Motivo da troca: ")
        abrir_ticket("Troca de Coleira", f"Motivo: {motivo}"), print("Dentro de algumas horas, um de nossos analistas entrar√° em contato para confirmar as informa√ß√µes, bem como identificar se a troca do produto √© devida")

    elif suporte_opcao == "3":
        print("ProtectPetBot: Localizando seu pet...")
        print("Endere√ßo: Rua da cachorrada, 78 - Santo Amaro")
        print("Latitude: -23.5505, Longitude: -46.6333")
        abrir_ticket("Informa√ß√µes em Tempo Real", "Localiza√ß√£o enviada ao cliente.")
    else:
        print("ProtectPetBot: Op√ß√£o inv√°lida. Tente novamente.")
        confirmar_satisfacao()

def duvidas():
    print("\nProtectPetBot: Qual a sua d√∫vida?")
    print("1 - Qual o hor√°rio de funcionamento do SAC?")
    print("2 - Quais s√£o as caracter√≠sticas da coleira?")
    print("3 - A coleira funciona offline para rastreamento?")
    print("4 - A coleira precisa de chip ou internet para funcionar o GPS?")

    opcao = input("Digite o n√∫mero da d√∫vida: ")

    if opcao == "1":
        print("ProtectPetBot: Nosso SAC funciona de segunda a sexta, das 8h √†s 18h. üïó")
    elif opcao == "2":
        print("ProtectPetBot: Nossa coleira √© de f√°cil modelagem com revestimento em couro da cor desejada, pingente com nome do pet, compacta, confort√°vel e com bateria que dura at√© 170 horas! üí°")
    elif opcao == "3":
        print("ProtectPetBot: Sim! A coleira funciona de forma offline para rastreamento gra√ßas √† conectividade com a nuvem que envia os dados aos nossos sistemas e ao tutor. üì°")
    elif opcao == "4":
        print("ProtectPetBot: N√£o! O GPS da coleira utiliza um protocolo leve (MQTT) otimizado para pequenos dispositivos, sem necessidade de chip ou internet para funcionar. üö´üì∂")
    else:
        print("ProtectPetBot: Op√ß√£o inv√°lida. Por favor, tente novamente.")

    confirmar_satisfacao_duvidas()

def chatbot():
    print("ProtectPetBot: üêæ Ol√°! Bem-vindo ao atendimento da ProtectPet.\n")

    while True:
        print("Menu de Atendimento:")
        print("1 - Comprar Produto")
        print("2 - Suporte")
        print("3 - D√∫vidas")
        print("4 - Sair")
        opcao = input("Digite o n√∫mero da op√ß√£o desejada: ")

        if opcao == "1":
            fluxo_compra()
        elif opcao == "2":
            suporte()
        elif opcao == "3":
            duvidas()
        elif opcao == "4":
            print("ProtectPetBot: Obrigado por conversar com a ProtectPet, em caso de Duvidas, √© s√≥ chamar. At√© logo! üê∂")
            break
        else:
            print("ProtectPetBot: Op√ß√£o inv√°lida. Por favor, tente novamente.\n")

chatbot()